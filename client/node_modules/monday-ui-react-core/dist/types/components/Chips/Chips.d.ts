import React from "react";
import { elementColorsNames } from "../../utils/colors-vars-map";
import { ChipsSize } from "./ChipsConstants";
import { AvatarType } from "../Avatar/AvatarConstants";
import { SubIcon, VibeComponent, VibeComponentProps } from "../../types";
import { ElementContent } from "../../types/ElementContent";
import "../Clickable/Clickable.scss";
interface ChipsProps extends VibeComponentProps {
    label?: string;
    disabled?: boolean;
    readOnly?: boolean;
    dataTestId?: string;
    /**
     * A React element that is positioned to the right of the text
     */
    rightRenderer?: ElementContent;
    /**
     * A React element that is positioned to the left of the text
     */
    leftRenderer?: ElementContent;
    /** Icon to place on the right */
    rightIcon?: SubIcon;
    /** Icon to place on the left */
    leftIcon?: SubIcon;
    /** Img to place as avatar on the right */
    rightAvatar?: string;
    /** the type of right avatar */
    rightAvatarType?: AvatarType;
    /** Img to place as avatar on the left */
    leftAvatar?: string;
    /** the type of left avatar */
    leftAvatarType?: AvatarType;
    /** ClassName for left or right icon */
    iconClassName?: string;
    /** ClassName for left or right avatar */
    avatarClassName?: string;
    color?: keyof Record<string, string>;
    /** size for font icon */
    iconSize?: number | string;
    onDelete?: (id: string, event: React.MouseEvent<HTMLSpanElement>) => void;
    /**
     * Disables the Chips's entry animation
     */
    noAnimation?: boolean;
    /**
     * Allow user to select text
     */
    allowTextSelection?: boolean;
    /**
     * Callback function to be called when the user clicks the component.
     */
    onMouseDown?: (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;
    /**
     * Callback function to be called when the user clicks the component.
     */
    onClick?: (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;
    /**
     * Applies when element has onClick or onMouseDown props
     */
    ariaLabel?: string;
    /**
     * Deprecated, there is no need to use this prop for implementing clickable chips. Please use onClick for this purpose.
     * @deprecated
     */
    clickable?: boolean;
    /**
     * Deprecated, there is no need to use this prop for implementing clickable chips. Please use onClick for this purpose.
     * @deprecated
     */
    isClickable?: boolean;
    /**
     * Disable click behaviors
     */
    disableClickableBehavior?: boolean;
    /**
     * Show border, the border color is `--text-color-on-primary`, should be when the chip is a colored background like
     * selected-color
     */
    showBorder?: boolean;
}
declare const Chips: VibeComponent<ChipsProps, HTMLElement> & {
    sizes?: typeof ChipsSize;
    colors?: typeof elementColorsNames;
    avatarTypes?: typeof AvatarType;
};
export default Chips;
